/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LogService_H
#define LogService_H

#include <thrift/TDispatchProcessor.h>
#include "log_types.h"



class LogServiceIf {
 public:
  virtual ~LogServiceIf() {}
  virtual void report(const std::string& msg) = 0;
};

class LogServiceIfFactory {
 public:
  typedef LogServiceIf Handler;

  virtual ~LogServiceIfFactory() {}

  virtual LogServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LogServiceIf* /* handler */) = 0;
};

class LogServiceIfSingletonFactory : virtual public LogServiceIfFactory {
 public:
  LogServiceIfSingletonFactory(const boost::shared_ptr<LogServiceIf>& iface) : iface_(iface) {}
  virtual ~LogServiceIfSingletonFactory() {}

  virtual LogServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LogServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LogServiceIf> iface_;
};

class LogServiceNull : virtual public LogServiceIf {
 public:
  virtual ~LogServiceNull() {}
  void report(const std::string& /* msg */) {
    return;
  }
};

typedef struct _LogService_report_args__isset {
  _LogService_report_args__isset() : msg(false) {}
  bool msg;
} _LogService_report_args__isset;

class LogService_report_args {
 public:

  LogService_report_args() : msg() {
  }

  virtual ~LogService_report_args() throw() {}

  std::string msg;

  _LogService_report_args__isset __isset;

  void __set_msg(const std::string& val) {
    msg = val;
  }

  bool operator == (const LogService_report_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const LogService_report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogService_report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogService_report_pargs {
 public:


  virtual ~LogService_report_pargs() throw() {}

  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogService_report_result {
 public:

  LogService_report_result() {
  }

  virtual ~LogService_report_result() throw() {}


  bool operator == (const LogService_report_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LogService_report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogService_report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LogService_report_presult {
 public:


  virtual ~LogService_report_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LogServiceClient : virtual public LogServiceIf {
 public:
  LogServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LogServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void report(const std::string& msg);
  void send_report(const std::string& msg);
  void recv_report();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LogServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LogServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LogServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LogServiceProcessor(boost::shared_ptr<LogServiceIf> iface) :
    iface_(iface) {
    processMap_["report"] = &LogServiceProcessor::process_report;
  }

  virtual ~LogServiceProcessor() {}
};

class LogServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LogServiceProcessorFactory(const ::boost::shared_ptr< LogServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LogServiceIfFactory > handlerFactory_;
};

class LogServiceMultiface : virtual public LogServiceIf {
 public:
  LogServiceMultiface(std::vector<boost::shared_ptr<LogServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LogServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LogServiceIf> > ifaces_;
  LogServiceMultiface() {}
  void add(boost::shared_ptr<LogServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void report(const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->report(msg);
    }
    ifaces_[i]->report(msg);
  }

};



#endif
